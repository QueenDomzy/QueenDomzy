# backend/swiftstay_ai.py

from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import openai, requests, os
from PIL import Image

openai.api_key = "YOUR_OPENAI_API_KEY"
DEEP_AI_KEY = "YOUR_DEEPAI_API_KEY"

UPLOAD_FOLDER = "backend/uploads"
ENHANCED_FOLDER = "backend/enhanced"
THUMBNAIL_FOLDER = "backend/thumbnails"
for folder in [UPLOAD_FOLDER, ENHANCED_FOLDER, THUMBNAIL_FOLDER]:
    os.makedirs(folder, exist_ok=True)

app = FastAPI()
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class ChatRequest(BaseModel):
    message: str

class ScreeningRequest(BaseModel):
    hotel_name: str
    contact_person: str
    email: str
    phone: str
    address: str

@app.post("/chat")
async def chat_ai(req: ChatRequest):
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You are SwiftStay AI, an expert in hotel management, onboarding, and Nigeria travel."},
            {"role": "user", "content": req.message}
        ]
    )
    return {"reply": response['choices'][0]['message']['content']}

@app.post("/screen")
async def screen_hotel(req: ScreeningRequest):
    data = req.dict()
    missing = [f for f in data if not data[f]]
    suggestions = []

    if missing:
        suggestions.append(f"Please provide: {', '.join(missing)}")

    prompt = f"Hotel submission data: {data}. Suggest improvements to attract more travelers."
    response = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You are an expert hotel marketing AI for SwiftStay Nigeria."},
            {"role": "user", "content": prompt}
        ]
    )
    ai_suggestion = response['choices'][0]['message']['content']
    suggestions.append(ai_suggestion)

    return {"status":"checked","missing":missing,"suggestions":suggestions}

@app.post("/enhance-image")
async def enhance_image(image: UploadFile = File(...)):
    filepath = os.path.join(UPLOAD_FOLDER, image.filename)
    with open(filepath, 'wb') as f:
        f.write(await image.read())

    # 1. Enhance via DeepAI
    response = requests.post(
        "https://api.deepai.org/api/torch-srgan",
        files={'image': open(filepath,'rb')},
        headers={'api-key': DEEP_AI_KEY}
    )
    data = response.json()
    enhanced_url = data.get('output_url')
    if not enhanced_url:
        return {"error":"AI enhancement failed"}

    # 2. Download enhanced image
    enhanced_img = requests.get(enhanced_url).content
    enhanced_path = os.path.join(ENHANCED_FOLDER, image.filename)
    with open(enhanced_path, 'wb') as f:
        f.write(enhanced_img)

    # 3. Generate thumbnail
    img = Image.open(enhanced_path)
    img.thumbnail((300, 200))
    thumb_path = os.path.join(THUMBNAIL_FOLDER, "thumb_" + image.filename)
    img.save(thumb_path)

    return {
        "status": "success",
        "enhanced_image": f"/{enhanced_path}",
        "thumbnail": f"/{thumb_path}"
    }

# Run with:
# uvicorn backend.swiftstay_ai:app --reload --port 5000